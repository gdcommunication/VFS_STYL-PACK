<%@ Control Language="C#" ClassName="ListeBlocages" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdVALIDATIONCDES" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdVALIDATIONCDESpage_changing"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdVALIDATIONCDES_RowCommand"
 DataKeyNames="InstanceId,Id"
 AllowSorting="true" OnSorting="grdVALIDATIONCDES_Sorting"  OnRowEditing="grdVALIDATIONCDES_RowEditing"  ShowSortIcon="true" >
<Columns>
 <asp:ButtonField CommandName="Edit"
  Text="<%$ resources: grdVALIDATIONCDES.44bbbd12-dfeb-4668-bde3-e8ada3bb910b.Text %>"        HeaderText="<%$ resources: grdVALIDATIONCDES.44bbbd12-dfeb-4668-bde3-e8ada3bb910b.ColumnHeading %>"        >
          </asp:ButtonField>
      <asp:BoundField DataField="RaisonBlocage"
      HeaderText="<%$ resources: grdVALIDATIONCDES.b4f6645c-429f-4776-93ab-22598a7f4884.ColumnHeading %>"       SortExpression="RaisonBlocage"    >
      </asp:BoundField>
    <asp:BoundField DataField="Debloquee"
      HeaderText="<%$ resources: grdVALIDATIONCDES.e8ad0dd3-0938-4e8c-bb33-e12dfbb4ad7b.ColumnHeading %>"       SortExpression="Debloquee"    >
      </asp:BoundField>
    <asp:BoundField DataField="DateBlocage"
      HeaderText="<%$ resources: grdVALIDATIONCDES.317b0f8a-4b0f-414f-9595-9e30f849f4ef.ColumnHeading %>"       SortExpression="DateBlocage"    >
      </asp:BoundField>
    <asp:BoundField DataField="Utilblocage"
      HeaderText="<%$ resources: grdVALIDATIONCDES.39f75a66-ca4d-49e4-ab68-339da60f6f5a.ColumnHeading %>"       SortExpression="Utilblocage"    >
      </asp:BoundField>
    <asp:BoundField DataField="DateDeblocage"
      HeaderText="<%$ resources: grdVALIDATIONCDES.45b4591b-cac8-4585-a6d9-0efbae2b63d0.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="UtilDeblocage"
      HeaderText="<%$ resources: grdVALIDATIONCDES.2a6fc090-abcb-44fc-9f4c-3b0a43cb616e.ColumnHeading %>"          >
      </asp:BoundField>
 </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">


protected void grdVALIDATIONCDESpage_changing(object sender, GridViewPageEventArgs e)
{
 grdVALIDATIONCDES.PageIndex = e.NewPageIndex;
 grdVALIDATIONCDES.DataBind();
}
protected void grdVALIDATIONCDES_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdVALIDATIONCDES_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsVALIDATIONCDES.SelectedIndex = rowIndex;
        object currentEntity = dsVALIDATIONCDES.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
        string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
            if (grdVALIDATIONCDES.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdVALIDATIONCDES.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsVALIDATIONCDES.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
                        currentEntity = dsVALIDATIONCDES.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdVALIDATIONCDES.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }
        if (e.CommandName.Equals("Edit"))
        {
            if (DialogService != null)
            {
                // QFDataGrid
                            DialogService.SetSpecs(400, 600, "CorrectionBlocage", string.Empty );
                            DialogService.EntityType = typeof(Sage.Entity.Interfaces.IVALIDATIONCDE );
                DialogService.EntityID = id;
                DialogService.ShowDialog();
            }
        }
    }
    grdVALIDATIONCDES_refresh();
}
    protected void grdVALIDATIONCDES_refresh()
    {
        if (PageWorkItem != null) {
            Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
            if (refresher != null)
            {
                refresher.RefreshAll();
            }
            else
            {
                Response.Redirect(Request.Url.ToString());
            }
        }
    }

        protected void grdVALIDATIONCDES_RowEditing(object sender, GridViewEditEventArgs e)
    {
        grdVALIDATIONCDES.SelectedIndex = e.NewEditIndex;
        e.Cancel = true;
    }
        </script>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="ListeBlocages_RTools" ToolbarLocation="right">
    <asp:Button runat="server" ID="QFNEWREASON"
 Text="<%$ resources: QFNEWREASON.Caption %>"  />
 
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=ListeBlocages&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkListeBlocagesHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="ListeBlocages" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.ISalesOrder); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsVALIDATIONCDES;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsVALIDATIONCDES
{ 
  get 
  {
    if (_dsVALIDATIONCDES == null)
    {
             _dsVALIDATIONCDES = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IVALIDATIONCDE), 
	    EntityType              ,"VALIDATIONCDESS", System.Reflection.MemberTypes.Property);
                   _dsVALIDATIONCDES.UseSmartQuery = true;
      	   	}
 	return _dsVALIDATIONCDES;
  }
}

void dsVALIDATIONCDES_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsVALIDATIONCDES.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsVALIDATIONCDES);
   }
}

 



 

protected override void OnAddEntityBindings() {
       dsVALIDATIONCDES.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("VALIDATIONCDESS", grdVALIDATIONCDES ));
   dsVALIDATIONCDES.BindFieldNames = new String[] { "Id","RaisonBlocage","Debloquee","DateBlocage","Utilblocage","DateDeblocage","UtilDeblocage" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dsVALIDATIONCDES_OnCurrentEntitySet);
    
    }
       
protected void QFNEWREASON_ClickAction(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("ListeBlocages.QFNEWREASON_OnClick", methodArgs);
  Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 QFNEWREASON.Click += new EventHandler(QFNEWREASON_ClickAction);


}

protected override void OnFormBound()
{
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (dsVALIDATIONCDES.SourceObject == null) { dsVALIDATIONCDES.SourceObject = BindingSource.Current; }
if (dsVALIDATIONCDES.SourceObject == null) { RegisterBindingsWithClient(dsVALIDATIONCDES); }
dsVALIDATIONCDES.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new ListeBlocagesAdapter(this)); }
}

public class ListeBlocagesAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IListeBlocages
{
    public ListeBlocagesAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IDataGridControl _grdVALIDATIONCDES;
    public  Sage.Platform.Controls.IDataGridControl grdVALIDATIONCDES
    {
        get { return FindControl(ref _grdVALIDATIONCDES, "grdVALIDATIONCDES"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _dsVALIDATIONCDES;
    public  Sage.Platform.Controls.IDataSourceControl dsVALIDATIONCDES
    {
        get { return FindControl(ref _dsVALIDATIONCDES, "dsVALIDATIONCDES"); }
    }
    private Sage.Platform.Controls.IButtonControl _QFNEWREASON;
    public  Sage.Platform.Controls.IButtonControl QFNEWREASON
    {
        get { return FindControl(ref _QFNEWREASON, "QFNEWREASON"); }
    }

    public  void QFNEWREASON_OnClick(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("ListeBlocages.QFNEWREASON_OnClick", methodArgs);
    }
}

</script>

<script type="text/javascript">
</script>
